// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package icobench

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD3f834e5DecodeGithubComSazorIcobench(in *jlexer.Lexer, out *TrendingResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]ICO, 0, 1)
					} else {
						out.Results = []ICO{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ICO
					(v1).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5EncodeGithubComSazorIcobench(out *jwriter.Writer, in TrendingResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Results) != 0 {
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Results {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrendingResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3f834e5EncodeGithubComSazorIcobench(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrendingResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3f834e5EncodeGithubComSazorIcobench(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrendingResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3f834e5DecodeGithubComSazorIcobench(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrendingResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3f834e5DecodeGithubComSazorIcobench(l, v)
}
func easyjsonD3f834e5DecodeGithubComSazorIcobench1(in *jlexer.Lexer, out *ICO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "logo":
			out.Logo = string(in.String())
		case "desc":
			out.Desc = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "premium":
			out.Premium = int64(in.Int64())
		case "dates":
			easyjsonD3f834e5Decode(in, &out.Dates)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5EncodeGithubComSazorIcobench1(out *jwriter.Writer, in ICO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.Logo != "" {
		const prefix string = ",\"logo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Logo))
	}
	if in.Desc != "" {
		const prefix string = ",\"desc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Desc))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Rating))
	}
	if in.Premium != 0 {
		const prefix string = ",\"premium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Premium))
	}
	if true {
		const prefix string = ",\"dates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonD3f834e5Encode(out, in.Dates)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ICO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3f834e5EncodeGithubComSazorIcobench1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ICO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3f834e5EncodeGithubComSazorIcobench1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ICO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3f834e5DecodeGithubComSazorIcobench1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ICO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3f834e5DecodeGithubComSazorIcobench1(l, v)
}
func easyjsonD3f834e5Decode(in *jlexer.Lexer, out *struct {
	PreICOStart string `json:"preIcoStart"`
	PreICOEnd   string `json:"preIcoEnd"`
	ICOStart    string `json:"icoStart"`
	ICOEnd      string `json:"icoEnd"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preIcoStart":
			out.PreICOStart = string(in.String())
		case "preIcoEnd":
			out.PreICOEnd = string(in.String())
		case "icoStart":
			out.ICOStart = string(in.String())
		case "icoEnd":
			out.ICOEnd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode(out *jwriter.Writer, in struct {
	PreICOStart string `json:"preIcoStart"`
	PreICOEnd   string `json:"preIcoEnd"`
	ICOStart    string `json:"icoStart"`
	ICOEnd      string `json:"icoEnd"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PreICOStart != "" {
		const prefix string = ",\"preIcoStart\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreICOStart))
	}
	if in.PreICOEnd != "" {
		const prefix string = ",\"preIcoEnd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreICOEnd))
	}
	if in.ICOStart != "" {
		const prefix string = ",\"icoStart\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ICOStart))
	}
	if in.ICOEnd != "" {
		const prefix string = ",\"icoEnd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ICOEnd))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5DecodeGithubComSazorIcobench2(in *jlexer.Lexer, out *DetailedICO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "ratingTeam":
			out.RatingTeam = float64(in.Float64())
		case "ratingVision":
			out.RatingVision = float64(in.Float64())
		case "ratingProduct":
			out.RatingProduct = float64(in.Float64())
		case "ratingProfile":
			out.RatingProfile = float64(in.Float64())
		case "url":
			out.URL = string(in.String())
		case "tagline":
			out.Tagline = string(in.String())
		case "intro":
			out.Intro = string(in.String())
		case "about":
			out.About = string(in.String())
		case "logo":
			out.Logo = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "milestones":
			if in.IsNull() {
				in.Skip()
				out.Milestones = nil
			} else {
				in.Delim('[')
				if out.Milestones == nil {
					if !in.IsDelim(']') {
						out.Milestones = make([]struct {
							Title   string `json:"title"`
							Content string `json:"content"`
						}, 0, 2)
					} else {
						out.Milestones = []struct {
							Title   string `json:"title"`
							Content string `json:"content"`
						}{}
					}
				} else {
					out.Milestones = (out.Milestones)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Title   string `json:"title"`
						Content string `json:"content"`
					}
					easyjsonD3f834e5Decode1(in, &v4)
					out.Milestones = append(out.Milestones, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "teamIntro":
			out.TeamIntro = string(in.String())
		case "notification":
			out.Notification = string(in.String())
		case "registration":
			out.Registration = string(in.String())
		case "restrictions":
			if in.IsNull() {
				in.Skip()
				out.Restrictions = nil
			} else {
				in.Delim('[')
				if out.Restrictions == nil {
					if !in.IsDelim(']') {
						out.Restrictions = make([]struct {
							Country string `json:"country"`
						}, 0, 4)
					} else {
						out.Restrictions = []struct {
							Country string `json:"country"`
						}{}
					}
				} else {
					out.Restrictions = (out.Restrictions)[:0]
				}
				for !in.IsDelim(']') {
					var v5 struct {
						Country string `json:"country"`
					}
					easyjsonD3f834e5Decode2(in, &v5)
					out.Restrictions = append(out.Restrictions, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "links":
			easyjsonD3f834e5Decode3(in, &out.Links)
		case "finance":
			easyjsonD3f834e5Decode4(in, &out.Finance)
		case "dates":
			easyjsonD3f834e5Decode5(in, &out.Dates)
		case "team":
			if in.IsNull() {
				in.Skip()
				out.Team = nil
			} else {
				in.Delim('[')
				if out.Team == nil {
					if !in.IsDelim(']') {
						out.Team = make([]struct {
							Name    string `json:"name"`
							Title   string `json:"title"`
							Links   string `json:"links"`
							URL     string `json:"url"`
							Socials []struct {
								Site string `json:"site"`
								URL  string `json:"url"`
							} `json:"socials"`
							Group string `json:"group"`
							Photo string `json:"photo"`
							Iss   string `json:"iss"`
						}, 0, 1)
					} else {
						out.Team = []struct {
							Name    string `json:"name"`
							Title   string `json:"title"`
							Links   string `json:"links"`
							URL     string `json:"url"`
							Socials []struct {
								Site string `json:"site"`
								URL  string `json:"url"`
							} `json:"socials"`
							Group string `json:"group"`
							Photo string `json:"photo"`
							Iss   string `json:"iss"`
						}{}
					}
				} else {
					out.Team = (out.Team)[:0]
				}
				for !in.IsDelim(']') {
					var v6 struct {
						Name    string `json:"name"`
						Title   string `json:"title"`
						Links   string `json:"links"`
						URL     string `json:"url"`
						Socials []struct {
							Site string `json:"site"`
							URL  string `json:"url"`
						} `json:"socials"`
						Group string `json:"group"`
						Photo string `json:"photo"`
						Iss   string `json:"iss"`
					}
					easyjsonD3f834e5Decode6(in, &v6)
					out.Team = append(out.Team, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ratings":
			if in.IsNull() {
				in.Skip()
				out.Ratings = nil
			} else {
				in.Delim('[')
				if out.Ratings == nil {
					if !in.IsDelim(']') {
						out.Ratings = make([]struct {
							Date    string  `json:"date"`
							Name    string  `json:"name"`
							URL     string  `json:"url"`
							Title   string  `json:"title"`
							Photo   string  `json:"photo"`
							Team    int     `json:"team"`
							Vision  int     `json:"vision"`
							Product int     `json:"product"`
							Profile float64 `json:"profile"`
							Review  string  `json:"review"`
							Weight  string  `json:"weight"`
							Agree   int     `json:"agree"`
						}, 0, 1)
					} else {
						out.Ratings = []struct {
							Date    string  `json:"date"`
							Name    string  `json:"name"`
							URL     string  `json:"url"`
							Title   string  `json:"title"`
							Photo   string  `json:"photo"`
							Team    int     `json:"team"`
							Vision  int     `json:"vision"`
							Product int     `json:"product"`
							Profile float64 `json:"profile"`
							Review  string  `json:"review"`
							Weight  string  `json:"weight"`
							Agree   int     `json:"agree"`
						}{}
					}
				} else {
					out.Ratings = (out.Ratings)[:0]
				}
				for !in.IsDelim(']') {
					var v7 struct {
						Date    string  `json:"date"`
						Name    string  `json:"name"`
						URL     string  `json:"url"`
						Title   string  `json:"title"`
						Photo   string  `json:"photo"`
						Team    int     `json:"team"`
						Vision  int     `json:"vision"`
						Product int     `json:"product"`
						Profile float64 `json:"profile"`
						Review  string  `json:"review"`
						Weight  string  `json:"weight"`
						Agree   int     `json:"agree"`
					}
					easyjsonD3f834e5Decode7(in, &v7)
					out.Ratings = append(out.Ratings, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]struct {
							ID   int    `json:"id"`
							Name string `json:"name"`
						}, 0, 2)
					} else {
						out.Categories = []struct {
							ID   int    `json:"id"`
							Name string `json:"name"`
						}{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v8 struct {
						ID   int    `json:"id"`
						Name string `json:"name"`
					}
					easyjsonD3f834e5Decode8(in, &v8)
					out.Categories = append(out.Categories, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exchanges":
			if in.IsNull() {
				in.Skip()
				out.Exchanges = nil
			} else {
				in.Delim('[')
				if out.Exchanges == nil {
					if !in.IsDelim(']') {
						out.Exchanges = make([]struct {
							ID       int     `json:"id"`
							Name     string  `json:"name"`
							Logo     string  `json:"logo"`
							Price    float64 `json:"price"`
							Currency string  `json:"currency"`
							Roi      string  `json:"roi"`
						}, 0, 1)
					} else {
						out.Exchanges = []struct {
							ID       int     `json:"id"`
							Name     string  `json:"name"`
							Logo     string  `json:"logo"`
							Price    float64 `json:"price"`
							Currency string  `json:"currency"`
							Roi      string  `json:"roi"`
						}{}
					}
				} else {
					out.Exchanges = (out.Exchanges)[:0]
				}
				for !in.IsDelim(']') {
					var v9 struct {
						ID       int     `json:"id"`
						Name     string  `json:"name"`
						Logo     string  `json:"logo"`
						Price    float64 `json:"price"`
						Currency string  `json:"currency"`
						Roi      string  `json:"roi"`
					}
					easyjsonD3f834e5Decode9(in, &v9)
					out.Exchanges = append(out.Exchanges, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kyc":
			easyjsonD3f834e5Decode10(in, &out.Kyc)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5EncodeGithubComSazorIcobench2(out *jwriter.Writer, in DetailedICO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Rating))
	}
	if in.RatingTeam != 0 {
		const prefix string = ",\"ratingTeam\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.RatingTeam))
	}
	if in.RatingVision != 0 {
		const prefix string = ",\"ratingVision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.RatingVision))
	}
	if in.RatingProduct != 0 {
		const prefix string = ",\"ratingProduct\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.RatingProduct))
	}
	if in.RatingProfile != 0 {
		const prefix string = ",\"ratingProfile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.RatingProfile))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.Tagline != "" {
		const prefix string = ",\"tagline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tagline))
	}
	if in.Intro != "" {
		const prefix string = ",\"intro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Intro))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.About))
	}
	if in.Logo != "" {
		const prefix string = ",\"logo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Logo))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if len(in.Milestones) != 0 {
		const prefix string = ",\"milestones\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Milestones {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode1(out, v11)
			}
			out.RawByte(']')
		}
	}
	if in.TeamIntro != "" {
		const prefix string = ",\"teamIntro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TeamIntro))
	}
	if in.Notification != "" {
		const prefix string = ",\"notification\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notification))
	}
	if in.Registration != "" {
		const prefix string = ",\"registration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Registration))
	}
	if len(in.Restrictions) != 0 {
		const prefix string = ",\"restrictions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Restrictions {
				if v12 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode2(out, v13)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonD3f834e5Encode3(out, in.Links)
	}
	if true {
		const prefix string = ",\"finance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonD3f834e5Encode4(out, in.Finance)
	}
	if true {
		const prefix string = ",\"dates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonD3f834e5Encode5(out, in.Dates)
	}
	if len(in.Team) != 0 {
		const prefix string = ",\"team\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Team {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode6(out, v15)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ratings) != 0 {
		const prefix string = ",\"ratings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Ratings {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode7(out, v17)
			}
			out.RawByte(']')
		}
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Categories {
				if v18 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode8(out, v19)
			}
			out.RawByte(']')
		}
	}
	if len(in.Exchanges) != 0 {
		const prefix string = ",\"exchanges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Exchanges {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode9(out, v21)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"kyc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonD3f834e5Encode10(out, in.Kyc)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DetailedICO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3f834e5EncodeGithubComSazorIcobench2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DetailedICO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3f834e5EncodeGithubComSazorIcobench2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DetailedICO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3f834e5DecodeGithubComSazorIcobench2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DetailedICO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3f834e5DecodeGithubComSazorIcobench2(l, v)
}
func easyjsonD3f834e5Decode10(in *jlexer.Lexer, out *struct {
	Invited []struct {
		Name   string `json:"name"`
		Status string `json:"status"`
	} `json:"invited"`
	Succeed int `json:"succeed"`
	Failed  int `json:"failed"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "invited":
			if in.IsNull() {
				in.Skip()
				out.Invited = nil
			} else {
				in.Delim('[')
				if out.Invited == nil {
					if !in.IsDelim(']') {
						out.Invited = make([]struct {
							Name   string `json:"name"`
							Status string `json:"status"`
						}, 0, 2)
					} else {
						out.Invited = []struct {
							Name   string `json:"name"`
							Status string `json:"status"`
						}{}
					}
				} else {
					out.Invited = (out.Invited)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						Name   string `json:"name"`
						Status string `json:"status"`
					}
					easyjsonD3f834e5Decode11(in, &v22)
					out.Invited = append(out.Invited, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "succeed":
			out.Succeed = int(in.Int())
		case "failed":
			out.Failed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode10(out *jwriter.Writer, in struct {
	Invited []struct {
		Name   string `json:"name"`
		Status string `json:"status"`
	} `json:"invited"`
	Succeed int `json:"succeed"`
	Failed  int `json:"failed"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Invited) != 0 {
		const prefix string = ",\"invited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Invited {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode11(out, v24)
			}
			out.RawByte(']')
		}
	}
	if in.Succeed != 0 {
		const prefix string = ",\"succeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Succeed))
	}
	if in.Failed != 0 {
		const prefix string = ",\"failed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Failed))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode11(in *jlexer.Lexer, out *struct {
	Name   string `json:"name"`
	Status string `json:"status"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode11(out *jwriter.Writer, in struct {
	Name   string `json:"name"`
	Status string `json:"status"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode9(in *jlexer.Lexer, out *struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Logo     string  `json:"logo"`
	Price    float64 `json:"price"`
	Currency string  `json:"currency"`
	Roi      string  `json:"roi"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "logo":
			out.Logo = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		case "roi":
			out.Roi = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode9(out *jwriter.Writer, in struct {
	ID       int     `json:"id"`
	Name     string  `json:"name"`
	Logo     string  `json:"logo"`
	Price    float64 `json:"price"`
	Currency string  `json:"currency"`
	Roi      string  `json:"roi"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Logo != "" {
		const prefix string = ",\"logo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Logo))
	}
	if in.Price != 0 {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Price))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Roi != "" {
		const prefix string = ",\"roi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Roi))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode8(in *jlexer.Lexer, out *struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode8(out *jwriter.Writer, in struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode7(in *jlexer.Lexer, out *struct {
	Date    string  `json:"date"`
	Name    string  `json:"name"`
	URL     string  `json:"url"`
	Title   string  `json:"title"`
	Photo   string  `json:"photo"`
	Team    int     `json:"team"`
	Vision  int     `json:"vision"`
	Product int     `json:"product"`
	Profile float64 `json:"profile"`
	Review  string  `json:"review"`
	Weight  string  `json:"weight"`
	Agree   int     `json:"agree"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "team":
			out.Team = int(in.Int())
		case "vision":
			out.Vision = int(in.Int())
		case "product":
			out.Product = int(in.Int())
		case "profile":
			out.Profile = float64(in.Float64())
		case "review":
			out.Review = string(in.String())
		case "weight":
			out.Weight = string(in.String())
		case "agree":
			out.Agree = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode7(out *jwriter.Writer, in struct {
	Date    string  `json:"date"`
	Name    string  `json:"name"`
	URL     string  `json:"url"`
	Title   string  `json:"title"`
	Photo   string  `json:"photo"`
	Team    int     `json:"team"`
	Vision  int     `json:"vision"`
	Product int     `json:"product"`
	Profile float64 `json:"profile"`
	Review  string  `json:"review"`
	Weight  string  `json:"weight"`
	Agree   int     `json:"agree"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Photo != "" {
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo))
	}
	if in.Team != 0 {
		const prefix string = ",\"team\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Team))
	}
	if in.Vision != 0 {
		const prefix string = ",\"vision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Vision))
	}
	if in.Product != 0 {
		const prefix string = ",\"product\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Product))
	}
	if in.Profile != 0 {
		const prefix string = ",\"profile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Profile))
	}
	if in.Review != "" {
		const prefix string = ",\"review\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Review))
	}
	if in.Weight != "" {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Weight))
	}
	if in.Agree != 0 {
		const prefix string = ",\"agree\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Agree))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode6(in *jlexer.Lexer, out *struct {
	Name    string `json:"name"`
	Title   string `json:"title"`
	Links   string `json:"links"`
	URL     string `json:"url"`
	Socials []struct {
		Site string `json:"site"`
		URL  string `json:"url"`
	} `json:"socials"`
	Group string `json:"group"`
	Photo string `json:"photo"`
	Iss   string `json:"iss"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "links":
			out.Links = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "socials":
			if in.IsNull() {
				in.Skip()
				out.Socials = nil
			} else {
				in.Delim('[')
				if out.Socials == nil {
					if !in.IsDelim(']') {
						out.Socials = make([]struct {
							Site string `json:"site"`
							URL  string `json:"url"`
						}, 0, 2)
					} else {
						out.Socials = []struct {
							Site string `json:"site"`
							URL  string `json:"url"`
						}{}
					}
				} else {
					out.Socials = (out.Socials)[:0]
				}
				for !in.IsDelim(']') {
					var v25 struct {
						Site string `json:"site"`
						URL  string `json:"url"`
					}
					easyjsonD3f834e5Decode12(in, &v25)
					out.Socials = append(out.Socials, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			out.Group = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "iss":
			out.Iss = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode6(out *jwriter.Writer, in struct {
	Name    string `json:"name"`
	Title   string `json:"title"`
	Links   string `json:"links"`
	URL     string `json:"url"`
	Socials []struct {
		Site string `json:"site"`
		URL  string `json:"url"`
	} `json:"socials"`
	Group string `json:"group"`
	Photo string `json:"photo"`
	Iss   string `json:"iss"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Links != "" {
		const prefix string = ",\"links\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Links))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if len(in.Socials) != 0 {
		const prefix string = ",\"socials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Socials {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjsonD3f834e5Encode12(out, v27)
			}
			out.RawByte(']')
		}
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Group))
	}
	if in.Photo != "" {
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo))
	}
	if in.Iss != "" {
		const prefix string = ",\"iss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Iss))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode12(in *jlexer.Lexer, out *struct {
	Site string `json:"site"`
	URL  string `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "site":
			out.Site = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode12(out *jwriter.Writer, in struct {
	Site string `json:"site"`
	URL  string `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Site != "" {
		const prefix string = ",\"site\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Site))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode5(in *jlexer.Lexer, out *struct {
	PreIcoStart string `json:"preIcoStart"`
	PreIcoEnd   string `json:"preIcoEnd"`
	IcoStart    string `json:"icoStart"`
	IcoEnd      string `json:"icoEnd"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preIcoStart":
			out.PreIcoStart = string(in.String())
		case "preIcoEnd":
			out.PreIcoEnd = string(in.String())
		case "icoStart":
			out.IcoStart = string(in.String())
		case "icoEnd":
			out.IcoEnd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode5(out *jwriter.Writer, in struct {
	PreIcoStart string `json:"preIcoStart"`
	PreIcoEnd   string `json:"preIcoEnd"`
	IcoStart    string `json:"icoStart"`
	IcoEnd      string `json:"icoEnd"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PreIcoStart != "" {
		const prefix string = ",\"preIcoStart\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreIcoStart))
	}
	if in.PreIcoEnd != "" {
		const prefix string = ",\"preIcoEnd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreIcoEnd))
	}
	if in.IcoStart != "" {
		const prefix string = ",\"icoStart\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IcoStart))
	}
	if in.IcoEnd != "" {
		const prefix string = ",\"icoEnd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IcoEnd))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode4(in *jlexer.Lexer, out *struct {
	Token       string  `json:"token"`
	Price       string  `json:"price"`
	Bonus       bool    `json:"bonus"`
	Tokens      int     `json:"tokens"`
	Tokentype   string  `json:"tokentype"`
	Hardcap     string  `json:"hardcap"`
	Softcap     string  `json:"softcap"`
	Raised      float64 `json:"raised"`
	Platform    string  `json:"platform"`
	Distributed string  `json:"distributed"`
	Minimum     string  `json:"minimum"`
	Accepting   string  `json:"accepting"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "bonus":
			out.Bonus = bool(in.Bool())
		case "tokens":
			out.Tokens = int(in.Int())
		case "tokentype":
			out.Tokentype = string(in.String())
		case "hardcap":
			out.Hardcap = string(in.String())
		case "softcap":
			out.Softcap = string(in.String())
		case "raised":
			out.Raised = float64(in.Float64())
		case "platform":
			out.Platform = string(in.String())
		case "distributed":
			out.Distributed = string(in.String())
		case "minimum":
			out.Minimum = string(in.String())
		case "accepting":
			out.Accepting = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode4(out *jwriter.Writer, in struct {
	Token       string  `json:"token"`
	Price       string  `json:"price"`
	Bonus       bool    `json:"bonus"`
	Tokens      int     `json:"tokens"`
	Tokentype   string  `json:"tokentype"`
	Hardcap     string  `json:"hardcap"`
	Softcap     string  `json:"softcap"`
	Raised      float64 `json:"raised"`
	Platform    string  `json:"platform"`
	Distributed string  `json:"distributed"`
	Minimum     string  `json:"minimum"`
	Accepting   string  `json:"accepting"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.Price != "" {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Price))
	}
	if in.Bonus {
		const prefix string = ",\"bonus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bonus))
	}
	if in.Tokens != 0 {
		const prefix string = ",\"tokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Tokens))
	}
	if in.Tokentype != "" {
		const prefix string = ",\"tokentype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tokentype))
	}
	if in.Hardcap != "" {
		const prefix string = ",\"hardcap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hardcap))
	}
	if in.Softcap != "" {
		const prefix string = ",\"softcap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Softcap))
	}
	if in.Raised != 0 {
		const prefix string = ",\"raised\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Raised))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.Distributed != "" {
		const prefix string = ",\"distributed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Distributed))
	}
	if in.Minimum != "" {
		const prefix string = ",\"minimum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Minimum))
	}
	if in.Accepting != "" {
		const prefix string = ",\"accepting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Accepting))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode3(in *jlexer.Lexer, out *struct {
	Twitter     string `json:"twitter"`
	Slack       string `json:"slack"`
	Telegram    string `json:"telegram"`
	Facebook    string `json:"facebook"`
	Medium      string `json:"medium"`
	Bitcointalk string `json:"bitcointalk"`
	Github      string `json:"github"`
	Reddit      string `json:"reddit"`
	Discord     string `json:"discord"`
	Youtube     string `json:"youtube"`
	Www         string `json:"www"`
	Bounty      string `json:"bounty"`
	Whitepaper  string `json:"whitepaper"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "twitter":
			out.Twitter = string(in.String())
		case "slack":
			out.Slack = string(in.String())
		case "telegram":
			out.Telegram = string(in.String())
		case "facebook":
			out.Facebook = string(in.String())
		case "medium":
			out.Medium = string(in.String())
		case "bitcointalk":
			out.Bitcointalk = string(in.String())
		case "github":
			out.Github = string(in.String())
		case "reddit":
			out.Reddit = string(in.String())
		case "discord":
			out.Discord = string(in.String())
		case "youtube":
			out.Youtube = string(in.String())
		case "www":
			out.Www = string(in.String())
		case "bounty":
			out.Bounty = string(in.String())
		case "whitepaper":
			out.Whitepaper = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode3(out *jwriter.Writer, in struct {
	Twitter     string `json:"twitter"`
	Slack       string `json:"slack"`
	Telegram    string `json:"telegram"`
	Facebook    string `json:"facebook"`
	Medium      string `json:"medium"`
	Bitcointalk string `json:"bitcointalk"`
	Github      string `json:"github"`
	Reddit      string `json:"reddit"`
	Discord     string `json:"discord"`
	Youtube     string `json:"youtube"`
	Www         string `json:"www"`
	Bounty      string `json:"bounty"`
	Whitepaper  string `json:"whitepaper"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Twitter != "" {
		const prefix string = ",\"twitter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Twitter))
	}
	if in.Slack != "" {
		const prefix string = ",\"slack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Slack))
	}
	if in.Telegram != "" {
		const prefix string = ",\"telegram\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Telegram))
	}
	if in.Facebook != "" {
		const prefix string = ",\"facebook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Facebook))
	}
	if in.Medium != "" {
		const prefix string = ",\"medium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Medium))
	}
	if in.Bitcointalk != "" {
		const prefix string = ",\"bitcointalk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bitcointalk))
	}
	if in.Github != "" {
		const prefix string = ",\"github\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Github))
	}
	if in.Reddit != "" {
		const prefix string = ",\"reddit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reddit))
	}
	if in.Discord != "" {
		const prefix string = ",\"discord\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Discord))
	}
	if in.Youtube != "" {
		const prefix string = ",\"youtube\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Youtube))
	}
	if in.Www != "" {
		const prefix string = ",\"www\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Www))
	}
	if in.Bounty != "" {
		const prefix string = ",\"bounty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bounty))
	}
	if in.Whitepaper != "" {
		const prefix string = ",\"whitepaper\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Whitepaper))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode2(in *jlexer.Lexer, out *struct {
	Country string `json:"country"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "country":
			out.Country = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode2(out *jwriter.Writer, in struct {
	Country string `json:"country"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5Decode1(in *jlexer.Lexer, out *struct {
	Title   string `json:"title"`
	Content string `json:"content"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5Encode1(out *jwriter.Writer, in struct {
	Title   string `json:"title"`
	Content string `json:"content"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Content != "" {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	out.RawByte('}')
}
func easyjsonD3f834e5DecodeGithubComSazorIcobench3(in *jlexer.Lexer, out *AllICOResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "icos":
			out.ICOs = int64(in.Int64())
		case "pages":
			out.Pages = int64(in.Int64())
		case "currentPage":
			out.CurrentPage = int64(in.Int64())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]ICO, 0, 1)
					} else {
						out.Results = []ICO{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v28 ICO
					(v28).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5EncodeGithubComSazorIcobench3(out *jwriter.Writer, in AllICOResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ICOs != 0 {
		const prefix string = ",\"icos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ICOs))
	}
	if in.Pages != 0 {
		const prefix string = ",\"pages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Pages))
	}
	if in.CurrentPage != 0 {
		const prefix string = ",\"currentPage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CurrentPage))
	}
	if len(in.Results) != 0 {
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Results {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllICOResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3f834e5EncodeGithubComSazorIcobench3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllICOResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3f834e5EncodeGithubComSazorIcobench3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllICOResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3f834e5DecodeGithubComSazorIcobench3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllICOResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3f834e5DecodeGithubComSazorIcobench3(l, v)
}
func easyjsonD3f834e5DecodeGithubComSazorIcobench4(in *jlexer.Lexer, out *AllICORequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderDesc":
			out.OrderDesc = string(in.String())
		case "orderAsc":
			out.OrderAsc = string(in.String())
		case "page":
			out.Page = int64(in.Int64())
		case "category":
			out.Category = int64(in.Int64())
		case "platform":
			out.Platform = string(in.String())
		case "accepting":
			out.Accepting = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "search":
			out.Search = string(in.String())
		case "bonus":
			out.Bonus = string(in.String())
		case "bounty":
			out.Bounty = string(in.String())
		case "team":
			out.Team = string(in.String())
		case "expert":
			out.Expert = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		case "startAfter":
			out.StartAfter = string(in.String())
		case "endBefore":
			out.EndBefore = string(in.String())
		case "registration":
			out.Registration = int64(in.Int64())
		case "ExclRestCountry":
			out.ExclRestCountry = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3f834e5EncodeGithubComSazorIcobench4(out *jwriter.Writer, in AllICORequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OrderDesc != "" {
		const prefix string = ",\"orderDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderDesc))
	}
	if in.OrderAsc != "" {
		const prefix string = ",\"orderAsc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderAsc))
	}
	if in.Page != 0 {
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Page))
	}
	if in.Category != 0 {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Category))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.Accepting != "" {
		const prefix string = ",\"accepting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Accepting))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Search != "" {
		const prefix string = ",\"search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Search))
	}
	if in.Bonus != "" {
		const prefix string = ",\"bonus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bonus))
	}
	if in.Bounty != "" {
		const prefix string = ",\"bounty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bounty))
	}
	if in.Team != "" {
		const prefix string = ",\"team\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Team))
	}
	if in.Expert != "" {
		const prefix string = ",\"expert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Expert))
	}
	if in.Rating != "" {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rating))
	}
	if in.StartAfter != "" {
		const prefix string = ",\"startAfter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StartAfter))
	}
	if in.EndBefore != "" {
		const prefix string = ",\"endBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EndBefore))
	}
	if in.Registration != 0 {
		const prefix string = ",\"registration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Registration))
	}
	if in.ExclRestCountry != "" {
		const prefix string = ",\"ExclRestCountry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExclRestCountry))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllICORequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3f834e5EncodeGithubComSazorIcobench4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllICORequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3f834e5EncodeGithubComSazorIcobench4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllICORequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3f834e5DecodeGithubComSazorIcobench4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllICORequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3f834e5DecodeGithubComSazorIcobench4(l, v)
}
